syntax = "proto3";

package proto;
option go_package = ".;proto";



// close response
message Close {}




// @@@ - follower connection request for join to master
// message FollowerRequest {
//  oneof data{
//   JoinMessage join_msg = 1; 
//  }
// }


// message LeaderResponse {
//   oneof data{
//    ProxyRequest proxy_request = 1;
//   }
// }
message ProxyRequest {
  string proxy_port = 1;
}

message EmptyRequest{}
message InfoResponse{
  string id = 1;
  bool is_master = 2;
  int32 weight = 3;
}

message CreateProxyRequest{
  string target_id= 1;
  string target_service_port = 2;
}

message PingRequest{}
message PongResponse{}

message CallRequest{
  string agent_id = 1;
}
message CallResponse{
  repeated string tags = 1;
}


message ConnectMessage {
  string id = 1;
  string addr = 2;
  bool is_server = 3;
}

message ConnectBackMessage {
  string id = 1;
}

service Discovery {
  rpc GetInfo(EmptyRequest) returns (InfoResponse);

  rpc Connect(stream ConnectMessage) returns (Close); // child -> parent
  rpc ConnectBack(stream ConnectBackMessage) returns (Close); // parent -> child
  rpc Ping(PingRequest) returns (PongResponse);
  rpc Call(CallRequest) returns (CallResponse);
}

// ================== Client Proxy Service ================

message RequestPayload {
  bytes conn = 1;
  string token = 2;  // implement in future
}

message ResponsePayload {
  bytes body = 1;
}

service ProxyManager{
  rpc SendPayload(RequestPayload) returns (ResponsePayload);
}